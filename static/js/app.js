/*** Javascript code to create simple dashboard application * @author Nathan Stevens* @version 1.0* @date 11/22/2023*/// url of json file to loadconst url = "https://2u-data-curriculum-team.s3.amazonaws.com/dataviz-classroom/v1.1/14-Interactive-Web-Visualizations/02-Homework/samples.json";// stores the loaded datavar jsonData;var defaultSubjectId = "940";// load the javascript data from the above url d3.json(url).then(data => {processData(data)});// return the sample objectfunction getSample(subjectId) {    return jsonData.samples.filter(item => subjectId == item.id)[0];}// return the top ten data points for bar plotfunction getBarPlotData(sample) {    let sampleValues = sample.sample_values.slice(0, 10);    let otuIds = sample.otu_ids.slice(0, 10).map(item => "OTU " + item);    let otuLabels = sample.otu_labels.slice(0, 10);        // reverse the data    sampleValues.reverse();    otuIds.reverse();    otuLabels.reverse();        console.log(sampleValues);    console.log(otuIds);    console.log(otuLabels);    return [sampleValues, otuIds, otuLabels];}// show the main plotfunction showBarPlot(sample) {    plotData = getBarPlotData(sample);        // get the plot data then finally plot it    let trace = {        x: plotData[0],        y: plotData[1],        text: plotData[2],        name: "Subject Plot",        type: "bar",        orientation: "h"     };        let data = [trace];        // Render the plot to the div tag with id "plot"    Plotly.newPlot("bar", data);}// update the bar plotfunction updateBarPlot(sample) {    plotData = getBarPlotData(sample);        Plotly.restyle("bar", "x", [plotData[0]]);    Plotly.restyle("bar", "y", [plotData[1]]);    Plotly.restyle("bar", "text", [plotData[2]]);}// show the bubble plot of datafunction showBubblePlot(sample) {    let trace = {            x: sample.otu_ids,            y: sample.sample_values,            text: sample.otu_labels,            mode: 'markers',            marker: {                color: sample.otu_ids,                size: sample.sample_values            }    };        // set the x axis labels    let layout = {            xaxis: {                title: {                  text: "OTU ID"                }            }    };        let data = [trace];    Plotly.newPlot("bubble", data, layout);}// update the demographic datafunction updateDemographic(subjectId) {    md = jsonData.metadata.filter(item => subjectId == item.id)[0];        console.log("MetaData:", md);    let info = "ID: " + md.id + "<br>Ethnecity: " + md.ethnecity +                "<br>Gender: " + md.gender + "<br>Age: " + md.age +               "<br>Location: " + md.location + "<br>Bbtype: " + md.bbtype +               "<br>Wfreq: " + md.wfreq;        d3.select("#sample-metadata").html(info);}// handle subject id changedfunction optionChanged() {    let subjectId = d3.select("#selDataset").property("value");    let sample = getSample(subjectId);        console.log("Selected Subject:", sample);        updateDemographic(subjectId);     updateBarPlot(sample);    showBubblePlot(sample);}// function to process the loaded datafunction processData(data) {    jsonData = data;    console.log("Data Loaded: ", jsonData);        // add the subject ids to the drop down    jsonData.names.map(item => {        d3.selectAll("#selDataset").append("option")            .text(item)            .property("value", item);    });        // show the initial plots for default sample    init();}// the initiation function to function init() {    let sample = getSample(defaultSubjectId);        // show bar and bubble plot    showBarPlot(sample);    showBubblePlot(sample);        // update the demographic information    updateDemographic(defaultSubjectId);      }